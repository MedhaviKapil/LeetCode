Question- Distance between nodes in a graph
Input: N*N array. 1 at index i for node n means that node has connected edge to node i. 0 otherwise
Output: Distance
*************************
import numpy as np

def floyd_warshall(graph):
    N = len(graph)
    dist = np.full((N, N), float('inf'))
    
    # Initialize the distance with given graph edges
    for i in range(N):
        for j in range(N):
            if graph[i][j] == 1:
                dist[i][j] = 1
            elif i == j:
                dist[i][j] = 0
    
    # Apply Floyd-Warshall algorithm
    for k in range(N):
        for i in range(N):
            for j in range(N):
                if dist[i][j] > dist[i][k] + dist[k][j]:
                    dist[i][j] = dist[i][k] + dist[k][j]
    
    return dist

# Example usage
graph = [
    [0, 1, 0, 0],
    [1, 0, 1, 1],
    [0, 1, 0, 1],
    [0, 1, 1, 0]
]

distances = floyd_warshall(graph)
print(distances)
